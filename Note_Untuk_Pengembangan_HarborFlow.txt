# Catatan Pengembangan untuk Proyek HarborFlow

Dokumen ini berisi rekomendasi dan catatan untuk pengembangan proyek HarborFlow berdasarkan analisis struktur dan praktik rekayasa perangkat lunak yang teridentifikasi dalam repositori. Tujuannya adalah untuk menetapkan serangkaian metrik yang dapat membantu mengelola proyek secara lebih efektif dan proaktif.

---

### Rekomendasi Metrik untuk Dipantau

Disarankan untuk secara teratur memantau dua kategori metrik: Metrik Proses (untuk kesehatan alur kerja) dan Metrik Proyek (untuk kesehatan produk).

#### 1. Rekomendasi Metrik Proses (Kesehatan Alur Kerja)

Metrik ini berfokus pada "bagaimana" tim membangun perangkat lunak. Tujuannya adalah meningkatkan efisiensi dan kualitas dalam jangka panjang.

*   **Build and Test Success Rate:**
    *   **Apa:** Pantau persentase keberhasilan dari workflow CI di `.github/workflows/dotnet.yml`.
    *   **Mengapa:** Kegagalan build yang sering adalah indikator awal dari masalah stabilitas kode dan integrasi. Menjaga tingkat keberhasilan yang tinggi (misalnya > 98%) memastikan bahwa `main branch` selalu dalam keadaan sehat.
    *   **Aksi:** Setiap kegagalan build harus dianggap sebagai prioritas tinggi untuk segera diperbaiki.

*   **Code Coverage:**
    *   **Apa:** Ukur persentase kode (terutama di `HarborFlow.Core`, `HarborFlow.Application`, dan `HarborFlow.Infrastructure`) yang dicakup oleh unit tests di direktori `HarborFlow.Tests` dan `HarborFlow.Backend.Tests`.
    *   **Mengapa:** Proyek ini sudah memiliki fondasi pengujian yang baik. Memformalkan metrik ini akan melindungi logika bisnis penting dari regresi.
    *   **Aksi:** Tetapkan target cakupan minimum (misalnya 85%) dan pastikan semua fitur baru menyertakan tes yang memadai.

*   **Migration Frequency:**
    *   **Apa:** Lacak seberapa sering migrasi database baru ditambahkan ke `HarborFlow.Infrastructure/Migrations`.
    *   **Mengapa:** Ini memberikan wawasan tentang stabilitas model data. Frekuensi yang terlalu tinggi mungkin menandakan kurangnya perencanaan desain data di awal.
    *   **Aksi:** Lakukan review desain data yang lebih menyeluruh sebelum implementasi untuk mengurangi perubahan skema yang tidak perlu.

#### 2. Rekomendasi Metrik Proyek (Kesehatan Produk & Pengiriman)

Metrik ini berfokus pada "apa" yang dikirimkan ke pengguna. Tujuannya adalah memastikan proyek berjalan sesuai jadwal, anggaran, dan target kualitas.

*   **Feature Completion Rate:**
    *   **Apa:** Ukur jumlah fitur atau user story yang diselesaikan per siklus (misalnya, per minggu atau per sprint), dengan mengacu pada `Feature_and_User_Flow.txt` sebagai dasar lingkup.
    *   **Mengapa:** Memberikan gambaran nyata tentang kecepatan tim dan memungkinkan prediksi jadwal rilis yang lebih akurat.
    *   **Aksi:** Bandingkan laju penyelesaian dengan rencana proyek untuk mengidentifikasi potensi keterlambatan lebih awal.

*   **Bug Density in ViewModels:**
    *   **Apa:** Pantau jumlah bug yang ditemukan di `ViewModels` (lapisan presentasi untuk WPF dan Web) relatif terhadap jumlah atau kompleksitasnya.
    *   **Mengapa:** Karena `ViewModels` secara langsung memengaruhi pengalaman pengguna, area ini harus menjadi fokus kualitas.
    *   **Aksi:** Prioritaskan pengujian dan perbaikan bug di `ViewModels` untuk memberikan dampak terbesar pada kepuasan pengguna.

*   **API Endpoint Error Rate:**
    *   **Apa:** Implementasikan logging dan monitoring untuk melacak persentase error (HTTP 5xx) pada endpoint API yang diekspos oleh `HarborFlow.Web` atau service di `HarborFlow.Application`.
    *   **Mengapa:** Ini adalah metrik keandalan backend yang krusial. Lonjakan error setelah deployment adalah sinyal jelas adanya regresi.
    *   **Aksi:** Siapkan *dashboard* atau *alert* untuk metrik ini guna memungkinkan respons cepat terhadap masalah produksi.

---

### Strategi Penggunaan Metrik

Gunakan **metrik proses** sebagai sinyal utama untuk perbaikan internal jangka panjang. Gunakan **metrik proyek** sebagai papan skor untuk mengelola pengiriman dan kualitas produk saat ini. Dengan menggabungkan keduanya, tim HarborFlow dapat beralih dari manajemen proyek yang reaktif menjadi proaktif dan berbasis data.
