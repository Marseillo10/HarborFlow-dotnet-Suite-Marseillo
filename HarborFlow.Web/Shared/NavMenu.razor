@using HarborFlow.Application.Services
@using HarborFlow.Core.Models
@inject SessionContext SessionContext
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">HarborFlow.Web</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-map" aria-hidden="true"></span> Map View
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="news">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Maritime News
            </NavLink>
        </div>

        @if (SessionContext.CurrentUser != null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="dashboard">
                    <span class="oi oi-dashboard" aria-hidden="true"></span> Dashboard
                </NavLink>
            </div>
        }

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="vessel-management">
                <span class="oi oi-boat" aria-hidden="true"></span> Vessel Management
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="service-requests">
                <span class="oi oi-briefcase" aria-hidden="true"></span> Service Requests
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        SessionContext.UserChanged += OnUserChanged;
    }

    private void OnUserChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        SessionContext.UserChanged -= OnUserChanged;
    }
}
