@page "/register"
@using HarborFlow.Core.Interfaces
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="auth-container">
    <div class="auth-card">
        <h3>Register</h3>
        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
            </div>

            <div class="form-group">
                <label for="fullName">Full Name</label>
                <InputText id="fullName" class="form-control" @bind-Value="registerModel.FullName" />
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
            </div>

            <button type="submit" class="btn btn-primary btn-block mt-3">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();

    private async Task HandleRegister()
    {
        var user = await AuthService.RegisterAsync(registerModel.Username, registerModel.Password, registerModel.Email, registerModel.FullName);
        if (user != null)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            // Handle failed registration
        }
    }

    public class RegisterModel
    {
        public string Username { get; set; } = "";
        public string FullName { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}
